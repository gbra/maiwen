import os, sys
import math
from utils.termcolor import colored

from analysis import Analysis

from data.data_structures import *

class RMA(Analysis): # define an analysis

   list_of_tasks=[]   

   def __init__(self):
	print  colored(' ' * self._indentation+"<b> Setting of the analysis : "+self.__class__.__name__, self._color)
	print colored(' ' * self._indentation+"**Running file: "+__file__, self._color)
	print  colored(' ' * self._indentation+"<e> Setting of the analysis : "+self.__class__.__name__, self._color)

   def analysis(self, model):
	print  colored(' ' * self._indentation+"<b> Analysis execution : RMA", self._color)

	#input: required data structure
	self.list_of_tasks=model.get("LIST_OF_TASKS")
	model.display_nbr("LIST_OF_TASKS")
	#analysis implementation
  	_utilization_factor=0.0     	
	for task in self.list_of_tasks: 
		_utilization_factor=_utilization_factor+task.worst_case_execution_time/task.period
	_tasks_nbr=float(len(self.list_of_tasks))	
	_test_bound=_tasks_nbr*(2.0**(1.0/_tasks_nbr)-1.0)  
    	if _utilization_factor<=_test_bound:
 		print  colored(' ' * self._indentation+"**RMA : test is satisfied : U="+ str(_utilization_factor) +" <= "+ str(_test_bound) +" -> the tasks set is schedulable!", self._color)
		_Sched="OK"		
	else:
		print  colored(' ' * self._indentation+"**RMA : test is not satisfied : "+ str(_utilization_factor) +" > "+ str(_test_bound) +"-> unable to conclude about the tasks set!", self._color)		
		_Sched="NOK (NAP)"
	#output: provided data structure
	self.tasks_meta=model.get("TASKS_META")
	setattr(self.tasks_meta, 'isSched (RMA)', _Sched)
	model.update(Data_Struct("TASKS_META", self.tasks_meta))
	model.display("TASKS_META")
	print  colored(' ' * self._indentation+"<e> Analysis execution : RMA", self._color)

